{"version":3,"sources":["../src/index.ts","../src/duck-prefab.tsx"],"names":[],"mappings":"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","sourcesContent":["import {\n  Types,\n  addComponent,\n  defineComponent,\n  defineQuery,\n  enterQuery,\n} from \"bitecs\";\nimport {\n  App,\n  AvatarPOVNode,\n  EntityID,\n  Held,\n  HubsWorld,\n  PermissionE,\n  SoundDefT,\n  SoundEffectsSystem,\n  SystemOrderE,\n  SystemsE,\n  anyEntityWith,\n  createNetworkedEntity,\n  registerAddon,\n} from \"hubs\";\nimport { Vector3 } from \"three\";\nimport URL_QUACK from \"./assets/quack.mp3\";\nimport URL_SPECIAL_QUACK from \"./assets/specialquack.mp3\";\nimport { DuckPrefab } from \"./duck-prefab\";\n\nconst Quack = defineComponent({\n  quacks: Types.f32,\n});\n\ntype QuackParams = {\n  quacks?: number;\n};\n\nconst DEFAULTS: Required<QuackParams> = {\n  quacks: 1,\n};\n\nconst duckInflator = (\n  world: HubsWorld,\n  eid: number,\n  params?: QuackParams\n): EntityID => {\n  params = Object.assign({}, params, DEFAULTS);\n  addComponent(world, Quack, eid);\n  Quack.quacks[eid] = params.quacks!;\n  return eid;\n};\n\nfunction playSound() {\n  const rand = Math.random();\n  if (rand < 0.01) {\n    APP.scene?.systems[\"hubs-systems\"].soundEffectsSystem.playSoundOneShot(\n      sounds.get(URL_SPECIAL_QUACK)\n    );\n  } else {\n    APP.scene?.systems[\"hubs-systems\"].soundEffectsSystem.playSoundOneShot(\n      sounds.get(URL_QUACK)\n    );\n  }\n}\n\nconst heldQuackQuery = defineQuery([Quack, Held]);\nconst heldQuackEnterQuery = enterQuery(heldQuackQuery);\nconst quackSystem = (app: App): void => {\n  heldQuackEnterQuery(app.world).forEach(() => {\n    playSound();\n  });\n};\n\nfunction duckChatCommand(app: App) {\n  const avatarEid = anyEntityWith(app.world, AvatarPOVNode)!;\n  const avatarPov = app.world.eid2obj.get(avatarEid)!;\n  const eid = createNetworkedEntity(APP.world, \"duck\", {});\n  const obj = app.world.eid2obj.get(eid)!;\n  obj.position.copy(avatarPov.localToWorld(new Vector3(0, 0, -1.5)));\n  obj.lookAt(avatarPov.getWorldPosition(new Vector3()));\n  playSound();\n}\n\nfunction onReady(app: App) {\n  [URL_QUACK, URL_SPECIAL_QUACK].forEach((url) => {\n    const sfxSystem = app.getSystem(\n      SystemsE.SoundEffectsSystem\n    ) as SoundEffectsSystem;\n    sfxSystem.registerSound(url).then((sound: SoundDefT) => {\n      sounds.set(sound.url, sound.id);\n    });\n  });\n}\n\nlet sounds = new Map<string, number>();\n\nregisterAddon(\"hubs-duck-addon\", {\n  name: \"Hubs Duck Add-on\",\n  description: `Spawns a duck when the \"duck\" chat command is invoked. It quacks.`,\n  onReady: onReady,\n  system: { system: quackSystem, order: SystemOrderE.PostPhysics },\n  inflator: { jsx: { id: \"quack\", inflator: duckInflator } },\n  prefab: {\n    id: \"duck\",\n    config: {\n      permission: PermissionE.SPAWN_AND_MOVE_MEDIA,\n      template: DuckPrefab,\n    },\n  },\n  chatCommand: { id: \"duck\", command: duckChatCommand },\n});\n","/** @jsx createElementEntity */\nimport { COLLISION_LAYERS, createElementEntity, EntityDef, Fit, FLOATY_OBJECT_FLAGS, getAbsoluteHref, Shape } from \"hubs\";\nimport ducky from \"./assets/DuckyMesh.glb\";\n\nexport function DuckPrefab(): EntityDef {\n  return (\n    <entity\n      name=\"Duck\"\n      networked\n      networkedTransform\n      mediaLoader={{\n        src: getAbsoluteHref(location.href, ducky),\n        resize: true,\n        recenter: true,\n        animateLoad: true,\n        isObjectMenuTarget: true\n      }}\n      quack\n      cursorRaycastable\n      remoteHoverTarget\n      handCollisionTarget\n      offersRemoteConstraint\n      offersHandConstraint\n      floatyObject={{\n        flags: FLOATY_OBJECT_FLAGS.HELIUM_WHEN_LARGE\n      }}\n      destroyAtExtremeDistance\n      holdable\n      rigidbody={{\n        collisionGroup: COLLISION_LAYERS.INTERACTABLES,\n        collisionMask:\n          COLLISION_LAYERS.HANDS |\n          COLLISION_LAYERS.ENVIRONMENT |\n          COLLISION_LAYERS.INTERACTABLES |\n          COLLISION_LAYERS.AVATAR\n      }}\n      physicsShape={{\n        fit: Fit.MANUAL,\n        type: Shape.CYLINDER,\n        halfExtents: [0.25, 0.5, 0.45]\n      }}\n      scale={[1, 1, 1]}\n      inspectable\n      deletable\n      hoverableVisuals\n    />\n  );\n}\n"]}